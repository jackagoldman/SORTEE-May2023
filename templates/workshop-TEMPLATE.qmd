---
title: "Integrating JavaScript Libraries into R for Dynamic Visualizations"
author: "your name here"
date: May 23, 2023
execute:
  message: false
  warning: false
format:
  html:
    toc: true
    toc-location: left
    theme: sandstone
---

# 0. Setting up

```{r libraries-and-data}
# import packages ----
library(tidyverse) # data wrangling & viz (with {ggplot2})
library(plotly) # JS plots!
library(DT) # JS tables!
library(leaflet) # JS maps!
library(leaflet.extras) # leaflet add-ons!

# reading in the data ----
lobs <- readRDS(file = here::here("data", "lobsters.rds"))
```

# 1. Summarizing the data

```{r creating-lobs-summary}
# creating new data frame ----
lobs_summary <- lobs %>% 
  
  # calculate total lobster counts by protection status, site, & year (each point will represent lobster counts at a single site for each year from 2012-2018) ----
  group_by(protection_status, site, year) %>% 
  # count the total number of lobsters 
  summarize(n = sum(total_count))
```

# 2. `plotly`

## a. create a static plot

```{r static-boxplot}
static <- lobs_summary %>% 
  
  # create boxplot of mpa vs non-mpa lobster counts ----
  ggplot(aes(x = protection_status, y = n)) +
  
  # geoms: a boxplot and points with jitter ----
  geom_boxplot(width = 0.5, outlier.shape = NA) +
  geom_point(aes(color = site, shape = site), size = 4, alpha = 0.8, #alpha changes transparency
             # turn the points into a jitter (with a little more control than geom_jitter)
             position = position_jitter(width = 0.25, height = 0, seed = 1)) +
  
  # update colors and shapes ----
  scale_color_manual(values = c("NAPL" = "#91B38A", 
                                "IVEE" = "#9565CC", 
                                "AQUE" = "#CCC065", 
                                "MOHK" = "#658ACC", 
                                "CARP" = "#CC6565")) +
  scale_shape_manual(values = c(15, 25, 17, 18, 19)) +
  
  # update labels ----
  labs(x = "Protection Status",
       y = "Lobster Counts",
       color = "Site", 
       shape = "Site") + 
  
  # theme ----
  theme_linedraw() +
  theme(axis.text = element_text(size = 10),
        axis.title = element_text(size = 13),
        legend.text = element_text(size = 10),
        legend.title = element_text(size = 11))

# print plot ----
static
```

## b. create an interactive plot

```{r basic-interactive-plot}
ggplotly(static)
```

## c. create a better interactive plot

### i. create a marker
markers are when you hover over an object it is the window that drops down , whatever pops up when you hover over a point

```{r summary-marker-df}
lobs_summary_marker <- lobs_summary %>% 
  
  # create a new column called "marker"---
  mutate(marker = paste0("Site: ", site, "<br>",
                         "Year: ", year, "<br>",
                         "Status: ", protection_status, "<br>",
                         "Lobster count: ", n)) # break in html /line break is <br>, html format in dataframe
```

### ii. make a new static plot with `text = marker` aesthetic argument

```{r new-static-plot, warning = TRUE}
# creating a new static plot ----
static_with_marker <- lobs_summary_marker %>% 
  
  # create boxplot of mpa vs non-mpa lobster counts ----
  ggplot(aes(x = protection_status, y = n, text = marker, group = protection_status)) + # text = marker, for any text elements use marker column
  
  # geoms: boxplot and jitter ----
  geom_boxplot(width = 0.5, outlier.shape = NA) +
  geom_point(aes(color = site, shape = site), size = 4, alpha = 0.8, 
             position = position_jitter(width = 0.25, height = 0, seed = 1)) +
  
  # update colors and shapes ----
  scale_color_manual(values = c("#91B38A", "#9565CC", "#CCC065", "#658ACC", "#CC6565")) +
  scale_shape_manual(values = c(15, 25, 17, 18, 19)) +
  
  # update labels ----
  labs(x = "Protection Status",
       y = "Lobster Counts",
       color = "Site", 
       shape = "Site") + 
  
  # theme ----
  theme_linedraw() +
  theme(axis.text = element_text(size = 10),
        axis.title = element_text(size = 13),
        legend.text = element_text(size = 10),
        legend.title = element_text(size = 11))

# running the ggplot object will give you a scary warning - that's ok! ----
static_with_marker
```

### iii. create plot with markers

```{r better-interactive-plot}
lobs_interactive <- ggplotly(static_with_marker, tooltip = "text") %>% 
  #adjust the layout using layout()
  layout(
    #global font option # each function in plotly takes a list
    font = list(family = "Times"),
    
    #adjust hover label (tooltip)
    hoverlabel = list(
      #edit the font" all goes into a list()
      font = list(
        family = "Times",
        size = 13,
        color = "#FFFFFF",
        aligned = "left"
      )
    )
  )
  # tooltip is hover tip, text corresponds to the element in the static ggplot
lobs_interactive
```

### iv. doing things in `plot_ly`

```{r doing-in-plotly}
plot_ly(
  
  # call the data ----
  lobs_summary_marker,
  
  # axes ----
  x = ~ protection_status,
  y = ~ n,
  
  # type: plot_ly equivalent of "geom" ----
  type = "box",
  
  # show underlying data ----
  boxpoints = "all",
  
  # center points on boxplot ----
  pointpos = 0,
  
  # control width of jitter ----
  jitter = 0.25,
  
  # tooltip ----
  hoverinfo = "text", 
  text = ~ marker,
  
  # colors ----
  color = ~ protection_status,
  colors = c("cornflowerblue", "darkgreen")) %>% 
  
  # layout: most formatting goes here! ----
  layout(
    
    # global font option 
    font = list(family = "Times", 
                size = 14),
    
    # changing axis labels 
    xaxis = list(title = list(text = "Protection status")),
    yaxis = list(title = list(text = "Lobster count")),
    
    # editing the marker/tooltip/hoverlabel 
    hoverlabel = list(
      # editing the font: all goes in a list()
      font = list(
        family = "Times",
        size = 13,
        color = "#FFFFFF",
        align = "left"
      )
    )
  )
```

# 3. `DT`

## a. create a basic interactive table

```{r basic-DT}
datatable(data = lobs)
```

## b. customizing your DT

```{r advanced-DT}
lobs_dt <- datatable(data = lobs, #all options go into first function
                     
                     # make the column anmes informative ------
                     colnames = c("Year", "Date", "Site", "Protection status", 
                                  "Transect", "Replicate", "Size (mm)", "Count", "Latitude",
                                  "Longitude"), # take concatenated list with c()
                     # add column filters
                     filter = "top",
                     
                     # put in extensions to datatable------
                     extensions = c("Buttons", "ColReorder"), # buttoms provides buttons at top or bottom for people to download table, call reorder allows people to rearrange order of columns
                     
                     # add in some options for our table --- all go in list
                     options = list(
                       # list 10 entries at once
                       pageLength = 10,
                       # automatically size columns
                       autoWidth = TRUE, 
                       # highlight entrices that match a search term
                       searchHighlight = TRUE,
                       
                       #adjust the document object
                       dom = "Bfrtip",
                       
                       # buttons options
                       buttons = c("copy", "csv", "excel", "pdf", "print", "colvis"), # need to put in DOM or else wont print
                       
                       # set colReorder to show up in table
                       colReorder = TRUE
                  
                       
                       
                     )
                  
                     ) %>% 
  
  # style the cells 
  formatStyle("site", 
              # set background colour for the cell
              backgroundColor = styleEqual(
                levels = list("NAPL", "IVEE", "AQUE", "MOHK", "CARP"),
                values = c("NAPL" = "#91B38A",
                           "IVEE" = "#9565CC",
                           "AQUE" = "#CCC065",
                           "MOHK" = "#658ACC",
                           "CARP" = "#CC6565")
                
              )
              
              
              
              )

lobs_dt
```

# 4. `leaflet`

## a. some cleaning and filtering

```{r unique-sites}
# create df of unique sites ----
sites <- lobs %>% 
  select(site, protection_status, lat, lon) %>% 
  distinct() #just pull out the distinct rows

# if we want functionality to toggle on and off mpa and non-mpa sites
# just mpa sites ----
mpa <- sites %>% 
  filter(protection_status == "MPA")

# just non-mpa sites ----
non_mpa <- sites %>% 
  filter(protection_status == "non-MPA")
```

## b. create a custom icon

```{r lobster-icon}
lobster_icon <- makeIcon(
  iconUrl = here::here("media", "lobster.png"), #filepath to png file
  iconWidth = 30, # unit in pixel
  iconHeight = 30
)

```

## c. create a map!

```{r leaflet-map}
site_map <- leaflet() %>% 
  
  #add basemap tiles
  addProviderTiles(providers$Esri.WorldImagery, group = "ESRI World Imagery") %>% # toggle feature needs to refer to something, do this by group
  addProviderTiles(providers$Esri.OceanBasemap, group = "ESRI Oceans") %>% 
  
  #mini map ---
  addMiniMap(toggleDisplay = TRUE, minimized = TRUE) %>% 
  
  # setView over Santa Barbara
  setView(lng = -119.83, lat = 34.44, zoom = 9) %>% 
  
  # add MPA markers
  addMarkers(data = mpa, group = "MPA Sites",
             icon = lobster_icon,
             lng = ~lon, lat = ~lat,
             popup = paste("Site Name: ", mpa$site)) %>%  # ~ grab column from dataframe
  # add non-MPA
  addMarkers(data = non_mpa, group = "non-MPA Sites",
             icon = lobster_icon,
             lng = ~lon, lat = ~lat,
             popup = paste("Site Name: ", non_mpa$site)) %>% 
  
  #add toggle layers control
  addLayersControl(
    baseGroups = c("ESRI World Imagery", "ESRI Oceans"),
    overlayGroups = c("MPA Sites", "non-MPA Sites")
  )

#reset map function not explored

site_map
```

# 4. saving the html objects

```{r saving-map, eval = FALSE}
htmltools::save_html(lobs_interactive, here::here("outputs", "plotly.html"))
htmltools::save_html(lobs_dt, here::here("outputs", "dt.html"))
htmltools::save_html(site_map, here::here("outputs", "leaflet.html"))
```

# 5. Prepare a report with your interactive visualizations!

Dynamic visualizations are particularly effective when embedded in reports – check out the fictitious reports (one `.qmd` and `.rmd`, for a side-by-side comparison) in the `example-reports/` folder in this repo:

-  `report-qmd.qmd`
-  `report-rmd.rmd`

Click the **Knit** or **Render** button on the open report file(s) to convert the markdown and code into a clean, organized, and easy-to-read HTML file.

While you may notice some feature and formatting differences between the two, both Quarto documents and R Markdown documents are effective tools for generating reproducible reports that combine prose, code, and outputs.